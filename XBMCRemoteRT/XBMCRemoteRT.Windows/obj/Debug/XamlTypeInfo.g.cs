//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace XBMCRemoteRT
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[52];
            _typeNameTable[0] = "XBMCRemoteRT.Converters.ListToStringConverter";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "XBMCRemoteRT.Converters.MinutesToStringConverter";
            _typeNameTable[3] = "XBMCRemoteRT.Converters.ListTrimmer";
            _typeNameTable[4] = "XBMCRemoteRT.Converters.BoolToOpacityConverter";
            _typeNameTable[5] = "XBMCRemoteRT.Converters.SpeedToSymbolIconConverter";
            _typeNameTable[6] = "XBMCRemoteRT.Converters.RepeatStateConverter";
            _typeNameTable[7] = "XBMCRemoteRT.Converters.RatingConverter";
            _typeNameTable[8] = "XBMCRemoteRT.Converters.StringToImageBrushConverter";
            _typeNameTable[9] = "XBMCRemoteRT.Converters.ToUpperConverter";
            _typeNameTable[10] = "XBMCRemoteRT.Converters.CountToOpacityConverter";
            _typeNameTable[11] = "XBMCRemoteRT.Converters.AuthBitmapConverter";
            _typeNameTable[12] = "XBMCRemoteRT.Converters.MacAddressConverter";
            _typeNameTable[13] = "XBMCRemoteRT.Converters.IPAddressConverter";
            _typeNameTable[14] = "XBMCRemoteRT.Converters.PlayerTypeToBoolConverter";
            _typeNameTable[15] = "XBMCRemoteRT.Converters.SecondsToStringConverter";
            _typeNameTable[16] = "XBMCRemoteRT.Converters.DurationToStringConverter";
            _typeNameTable[17] = "Coding4Fun.Toolkit.Controls.RoundButton";
            _typeNameTable[18] = "Coding4Fun.Toolkit.Controls.ButtonBase";
            _typeNameTable[19] = "Windows.UI.Xaml.Controls.Button";
            _typeNameTable[20] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[21] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[22] = "Windows.UI.Xaml.Controls.Orientation";
            _typeNameTable[23] = "Double";
            _typeNameTable[24] = "XBMCRemoteRT.CoverPage";
            _typeNameTable[25] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[26] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[27] = "XBMCRemoteRT.Common.ObservableDictionary";
            _typeNameTable[28] = "String";
            _typeNameTable[29] = "XBMCRemoteRT.Common.NavigationHelper";
            _typeNameTable[30] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[31] = "XBMCRemoteRT.MainPage";
            _typeNameTable[32] = "XBMCRemoteRT.Pages.AddConnectionPage";
            _typeNameTable[33] = "XBMCRemoteRT.Pages.Audio.AlbumPage";
            _typeNameTable[34] = "XBMCRemoteRT.Pages.Audio.AllMusicPage";
            _typeNameTable[35] = "XBMCRemoteRT.Pages.Audio.ArtistDetailsPage";
            _typeNameTable[36] = "XBMCRemoteRT.Pages.EditConnectionPage";
            _typeNameTable[37] = "XBMCRemoteRT.Pages.InputPage";
            _typeNameTable[38] = "XBMCRemoteRT.Converters.IdToColourConverter";
            _typeNameTable[39] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[40] = "Int32";
            _typeNameTable[41] = "XBMCRemoteRT.Converters.IdToThicknessConverter";
            _typeNameTable[42] = "XBMCRemoteRT.Pages.NowPlaying";
            _typeNameTable[43] = "XBMCRemoteRT.Pages.Video.AllMoviesPage";
            _typeNameTable[44] = "XBMCRemoteRT.Pages.Video.AllTVShowsPage";
            _typeNameTable[45] = "XBMCRemoteRT.Pages.Video.MovieDetailsHub";
            _typeNameTable[46] = "XBMCRemoteRT.UserControls.ColumnGridView";
            _typeNameTable[47] = "Windows.UI.Xaml.Controls.ListViewSelectionMode";
            _typeNameTable[48] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[49] = "XBMCRemoteRT.Pages.Video.SearchMoviesPage";
            _typeNameTable[50] = "XBMCRemoteRT.Pages.Video.SearchTVShowsPage";
            _typeNameTable[51] = "XBMCRemoteRT.Pages.Video.TVShowDetailsHub";

            _typeTable = new global::System.Type[52];
            _typeTable[0] = typeof(global::XBMCRemoteRT.Converters.ListToStringConverter);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::XBMCRemoteRT.Converters.MinutesToStringConverter);
            _typeTable[3] = typeof(global::XBMCRemoteRT.Converters.ListTrimmer);
            _typeTable[4] = typeof(global::XBMCRemoteRT.Converters.BoolToOpacityConverter);
            _typeTable[5] = typeof(global::XBMCRemoteRT.Converters.SpeedToSymbolIconConverter);
            _typeTable[6] = typeof(global::XBMCRemoteRT.Converters.RepeatStateConverter);
            _typeTable[7] = typeof(global::XBMCRemoteRT.Converters.RatingConverter);
            _typeTable[8] = typeof(global::XBMCRemoteRT.Converters.StringToImageBrushConverter);
            _typeTable[9] = typeof(global::XBMCRemoteRT.Converters.ToUpperConverter);
            _typeTable[10] = typeof(global::XBMCRemoteRT.Converters.CountToOpacityConverter);
            _typeTable[11] = typeof(global::XBMCRemoteRT.Converters.AuthBitmapConverter);
            _typeTable[12] = typeof(global::XBMCRemoteRT.Converters.MacAddressConverter);
            _typeTable[13] = typeof(global::XBMCRemoteRT.Converters.IPAddressConverter);
            _typeTable[14] = typeof(global::XBMCRemoteRT.Converters.PlayerTypeToBoolConverter);
            _typeTable[15] = typeof(global::XBMCRemoteRT.Converters.SecondsToStringConverter);
            _typeTable[16] = typeof(global::XBMCRemoteRT.Converters.DurationToStringConverter);
            _typeTable[17] = typeof(global::Coding4Fun.Toolkit.Controls.RoundButton);
            _typeTable[18] = typeof(global::Coding4Fun.Toolkit.Controls.ButtonBase);
            _typeTable[19] = typeof(global::Windows.UI.Xaml.Controls.Button);
            _typeTable[20] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[21] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[22] = typeof(global::Windows.UI.Xaml.Controls.Orientation);
            _typeTable[23] = typeof(global::System.Double);
            _typeTable[24] = typeof(global::XBMCRemoteRT.CoverPage);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[26] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[27] = typeof(global::XBMCRemoteRT.Common.ObservableDictionary);
            _typeTable[28] = typeof(global::System.String);
            _typeTable[29] = typeof(global::XBMCRemoteRT.Common.NavigationHelper);
            _typeTable[30] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[31] = typeof(global::XBMCRemoteRT.MainPage);
            _typeTable[32] = typeof(global::XBMCRemoteRT.Pages.AddConnectionPage);
            _typeTable[33] = typeof(global::XBMCRemoteRT.Pages.Audio.AlbumPage);
            _typeTable[34] = typeof(global::XBMCRemoteRT.Pages.Audio.AllMusicPage);
            _typeTable[35] = typeof(global::XBMCRemoteRT.Pages.Audio.ArtistDetailsPage);
            _typeTable[36] = typeof(global::XBMCRemoteRT.Pages.EditConnectionPage);
            _typeTable[37] = typeof(global::XBMCRemoteRT.Pages.InputPage);
            _typeTable[38] = typeof(global::XBMCRemoteRT.Converters.IdToColourConverter);
            _typeTable[39] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[40] = typeof(global::System.Int32);
            _typeTable[41] = typeof(global::XBMCRemoteRT.Converters.IdToThicknessConverter);
            _typeTable[42] = typeof(global::XBMCRemoteRT.Pages.NowPlaying);
            _typeTable[43] = typeof(global::XBMCRemoteRT.Pages.Video.AllMoviesPage);
            _typeTable[44] = typeof(global::XBMCRemoteRT.Pages.Video.AllTVShowsPage);
            _typeTable[45] = typeof(global::XBMCRemoteRT.Pages.Video.MovieDetailsHub);
            _typeTable[46] = typeof(global::XBMCRemoteRT.UserControls.ColumnGridView);
            _typeTable[47] = typeof(global::Windows.UI.Xaml.Controls.ListViewSelectionMode);
            _typeTable[48] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[49] = typeof(global::XBMCRemoteRT.Pages.Video.SearchMoviesPage);
            _typeTable[50] = typeof(global::XBMCRemoteRT.Pages.Video.SearchTVShowsPage);
            _typeTable[51] = typeof(global::XBMCRemoteRT.Pages.Video.TVShowDetailsHub);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ListToStringConverter() { return new global::XBMCRemoteRT.Converters.ListToStringConverter(); }
        private object Activate_2_MinutesToStringConverter() { return new global::XBMCRemoteRT.Converters.MinutesToStringConverter(); }
        private object Activate_3_ListTrimmer() { return new global::XBMCRemoteRT.Converters.ListTrimmer(); }
        private object Activate_4_BoolToOpacityConverter() { return new global::XBMCRemoteRT.Converters.BoolToOpacityConverter(); }
        private object Activate_5_SpeedToSymbolIconConverter() { return new global::XBMCRemoteRT.Converters.SpeedToSymbolIconConverter(); }
        private object Activate_6_RepeatStateConverter() { return new global::XBMCRemoteRT.Converters.RepeatStateConverter(); }
        private object Activate_7_RatingConverter() { return new global::XBMCRemoteRT.Converters.RatingConverter(); }
        private object Activate_8_StringToImageBrushConverter() { return new global::XBMCRemoteRT.Converters.StringToImageBrushConverter(); }
        private object Activate_9_ToUpperConverter() { return new global::XBMCRemoteRT.Converters.ToUpperConverter(); }
        private object Activate_10_CountToOpacityConverter() { return new global::XBMCRemoteRT.Converters.CountToOpacityConverter(); }
        private object Activate_11_AuthBitmapConverter() { return new global::XBMCRemoteRT.Converters.AuthBitmapConverter(); }
        private object Activate_12_MacAddressConverter() { return new global::XBMCRemoteRT.Converters.MacAddressConverter(); }
        private object Activate_13_IPAddressConverter() { return new global::XBMCRemoteRT.Converters.IPAddressConverter(); }
        private object Activate_14_PlayerTypeToBoolConverter() { return new global::XBMCRemoteRT.Converters.PlayerTypeToBoolConverter(); }
        private object Activate_15_SecondsToStringConverter() { return new global::XBMCRemoteRT.Converters.SecondsToStringConverter(); }
        private object Activate_16_DurationToStringConverter() { return new global::XBMCRemoteRT.Converters.DurationToStringConverter(); }
        private object Activate_17_RoundButton() { return new global::Coding4Fun.Toolkit.Controls.RoundButton(); }
        private object Activate_24_CoverPage() { return new global::XBMCRemoteRT.CoverPage(); }
        private object Activate_27_ObservableDictionary() { return new global::XBMCRemoteRT.Common.ObservableDictionary(); }
        private object Activate_31_MainPage() { return new global::XBMCRemoteRT.MainPage(); }
        private object Activate_32_AddConnectionPage() { return new global::XBMCRemoteRT.Pages.AddConnectionPage(); }
        private object Activate_33_AlbumPage() { return new global::XBMCRemoteRT.Pages.Audio.AlbumPage(); }
        private object Activate_34_AllMusicPage() { return new global::XBMCRemoteRT.Pages.Audio.AllMusicPage(); }
        private object Activate_35_ArtistDetailsPage() { return new global::XBMCRemoteRT.Pages.Audio.ArtistDetailsPage(); }
        private object Activate_36_EditConnectionPage() { return new global::XBMCRemoteRT.Pages.EditConnectionPage(); }
        private object Activate_37_InputPage() { return new global::XBMCRemoteRT.Pages.InputPage(); }
        private object Activate_38_IdToColourConverter() { return new global::XBMCRemoteRT.Converters.IdToColourConverter(); }
        private object Activate_41_IdToThicknessConverter() { return new global::XBMCRemoteRT.Converters.IdToThicknessConverter(); }
        private object Activate_42_NowPlaying() { return new global::XBMCRemoteRT.Pages.NowPlaying(); }
        private object Activate_43_AllMoviesPage() { return new global::XBMCRemoteRT.Pages.Video.AllMoviesPage(); }
        private object Activate_44_AllTVShowsPage() { return new global::XBMCRemoteRT.Pages.Video.AllTVShowsPage(); }
        private object Activate_45_MovieDetailsHub() { return new global::XBMCRemoteRT.Pages.Video.MovieDetailsHub(); }
        private object Activate_46_ColumnGridView() { return new global::XBMCRemoteRT.UserControls.ColumnGridView(); }
        private object Activate_49_SearchMoviesPage() { return new global::XBMCRemoteRT.Pages.Video.SearchMoviesPage(); }
        private object Activate_50_SearchTVShowsPage() { return new global::XBMCRemoteRT.Pages.Video.SearchTVShowsPage(); }
        private object Activate_51_TVShowDetailsHub() { return new global::XBMCRemoteRT.Pages.Video.TVShowDetailsHub(); }
        private void MapAdd_27_ObservableDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  XBMCRemoteRT.Converters.ListToStringConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_ListToStringConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  XBMCRemoteRT.Converters.MinutesToStringConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_2_MinutesToStringConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  XBMCRemoteRT.Converters.ListTrimmer
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_ListTrimmer;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  XBMCRemoteRT.Converters.BoolToOpacityConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_BoolToOpacityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  XBMCRemoteRT.Converters.SpeedToSymbolIconConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_SpeedToSymbolIconConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  XBMCRemoteRT.Converters.RepeatStateConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_RepeatStateConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  XBMCRemoteRT.Converters.RatingConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_RatingConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  XBMCRemoteRT.Converters.StringToImageBrushConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_StringToImageBrushConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  XBMCRemoteRT.Converters.ToUpperConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_9_ToUpperConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  XBMCRemoteRT.Converters.CountToOpacityConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_CountToOpacityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  XBMCRemoteRT.Converters.AuthBitmapConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_11_AuthBitmapConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  XBMCRemoteRT.Converters.MacAddressConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_12_MacAddressConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  XBMCRemoteRT.Converters.IPAddressConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_13_IPAddressConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  XBMCRemoteRT.Converters.PlayerTypeToBoolConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_14_PlayerTypeToBoolConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  XBMCRemoteRT.Converters.SecondsToStringConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_15_SecondsToStringConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  XBMCRemoteRT.Converters.DurationToStringConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_16_DurationToStringConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Coding4Fun.Toolkit.Controls.RoundButton
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Coding4Fun.Toolkit.Controls.ButtonBase"));
                userType.Activator = Activate_17_RoundButton;
                userType.AddMemberName("PressedBrush");
                userType.AddMemberName("Orientation");
                userType.AddMemberName("ButtonWidth");
                userType.AddMemberName("ButtonHeight");
                xamlType = userType;
                break;

            case 18:   //  Coding4Fun.Toolkit.Controls.ButtonBase
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Button"));
                userType.AddMemberName("Label");
                xamlType = userType;
                break;

            case 19:   //  Windows.UI.Xaml.Controls.Button
                xamlType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Windows.UI.Xaml.Controls.Orientation
                xamlType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Double
                xamlType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  XBMCRemoteRT.CoverPage
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_24_CoverPage;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  XBMCRemoteRT.Common.ObservableDictionary
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.DictionaryAdd = MapAdd_27_ObservableDictionary;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  String
                xamlType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  XBMCRemoteRT.Common.NavigationHelper
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  XBMCRemoteRT.MainPage
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_MainPage;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  XBMCRemoteRT.Pages.AddConnectionPage
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_AddConnectionPage;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  XBMCRemoteRT.Pages.Audio.AlbumPage
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_AlbumPage;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  XBMCRemoteRT.Pages.Audio.AllMusicPage
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_34_AllMusicPage;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  XBMCRemoteRT.Pages.Audio.ArtistDetailsPage
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_35_ArtistDetailsPage;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  XBMCRemoteRT.Pages.EditConnectionPage
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_36_EditConnectionPage;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  XBMCRemoteRT.Pages.InputPage
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_37_InputPage;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  XBMCRemoteRT.Converters.IdToColourConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_38_IdToColourConverter;
                userType.AddMemberName("CurrentItemId");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 40:   //  Int32
                xamlType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 41:   //  XBMCRemoteRT.Converters.IdToThicknessConverter
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_41_IdToThicknessConverter;
                userType.AddMemberName("CurrentItemId");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  XBMCRemoteRT.Pages.NowPlaying
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_42_NowPlaying;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  XBMCRemoteRT.Pages.Video.AllMoviesPage
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_43_AllMoviesPage;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  XBMCRemoteRT.Pages.Video.AllTVShowsPage
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_44_AllTVShowsPage;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 45:   //  XBMCRemoteRT.Pages.Video.MovieDetailsHub
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_45_MovieDetailsHub;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  XBMCRemoteRT.UserControls.ColumnGridView
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_46_ColumnGridView;
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("Columns");
                userType.AddMemberName("SelectionMode");
                userType.AddMemberName("ItemTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 47:   //  Windows.UI.Xaml.Controls.ListViewSelectionMode
                xamlType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 48:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 49:   //  XBMCRemoteRT.Pages.Video.SearchMoviesPage
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_49_SearchMoviesPage;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 50:   //  XBMCRemoteRT.Pages.Video.SearchTVShowsPage
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_50_SearchTVShowsPage;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 51:   //  XBMCRemoteRT.Pages.Video.TVShowDetailsHub
                userType = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_51_TVShowDetailsHub;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Coding4Fun.Toolkit.Controls.Coding4Fun_Toolkit_Controls__Win8_1__XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_RoundButton_PressedBrush(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.RoundButton)instance;
            return that.PressedBrush;
        }
        private void set_0_RoundButton_PressedBrush(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.RoundButton)instance;
            that.PressedBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_1_RoundButton_Orientation(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.RoundButton)instance;
            return that.Orientation;
        }
        private void set_1_RoundButton_Orientation(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.RoundButton)instance;
            that.Orientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_2_RoundButton_ButtonWidth(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.RoundButton)instance;
            return that.ButtonWidth;
        }
        private void set_2_RoundButton_ButtonWidth(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.RoundButton)instance;
            that.ButtonWidth = (global::System.Double)Value;
        }
        private object get_3_RoundButton_ButtonHeight(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.RoundButton)instance;
            return that.ButtonHeight;
        }
        private void set_3_RoundButton_ButtonHeight(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.RoundButton)instance;
            that.ButtonHeight = (global::System.Double)Value;
        }
        private object get_4_ButtonBase_Label(object instance)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.ButtonBase)instance;
            return that.Label;
        }
        private void set_4_ButtonBase_Label(object instance, object Value)
        {
            var that = (global::Coding4Fun.Toolkit.Controls.ButtonBase)instance;
            that.Label = (global::System.Object)Value;
        }
        private object get_5_CoverPage_DefaultViewModel(object instance)
        {
            var that = (global::XBMCRemoteRT.CoverPage)instance;
            return that.DefaultViewModel;
        }
        private object get_6_CoverPage_NavigationHelper(object instance)
        {
            var that = (global::XBMCRemoteRT.CoverPage)instance;
            return that.NavigationHelper;
        }
        private object get_7_MainPage_DefaultViewModel(object instance)
        {
            var that = (global::XBMCRemoteRT.MainPage)instance;
            return that.DefaultViewModel;
        }
        private object get_8_MainPage_NavigationHelper(object instance)
        {
            var that = (global::XBMCRemoteRT.MainPage)instance;
            return that.NavigationHelper;
        }
        private object get_9_AddConnectionPage_DefaultViewModel(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.AddConnectionPage)instance;
            return that.DefaultViewModel;
        }
        private object get_10_AddConnectionPage_NavigationHelper(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.AddConnectionPage)instance;
            return that.NavigationHelper;
        }
        private object get_11_AlbumPage_DefaultViewModel(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Audio.AlbumPage)instance;
            return that.DefaultViewModel;
        }
        private object get_12_AlbumPage_NavigationHelper(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Audio.AlbumPage)instance;
            return that.NavigationHelper;
        }
        private object get_13_AllMusicPage_DefaultViewModel(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Audio.AllMusicPage)instance;
            return that.DefaultViewModel;
        }
        private object get_14_AllMusicPage_NavigationHelper(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Audio.AllMusicPage)instance;
            return that.NavigationHelper;
        }
        private object get_15_ArtistDetailsPage_DefaultViewModel(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Audio.ArtistDetailsPage)instance;
            return that.DefaultViewModel;
        }
        private object get_16_ArtistDetailsPage_NavigationHelper(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Audio.ArtistDetailsPage)instance;
            return that.NavigationHelper;
        }
        private object get_17_EditConnectionPage_DefaultViewModel(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.EditConnectionPage)instance;
            return that.DefaultViewModel;
        }
        private object get_18_EditConnectionPage_NavigationHelper(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.EditConnectionPage)instance;
            return that.NavigationHelper;
        }
        private object get_19_InputPage_DefaultViewModel(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.InputPage)instance;
            return that.DefaultViewModel;
        }
        private object get_20_InputPage_NavigationHelper(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.InputPage)instance;
            return that.NavigationHelper;
        }
        private object get_21_IdToColourConverter_CurrentItemId(object instance)
        {
            var that = (global::XBMCRemoteRT.Converters.IdToColourConverter)instance;
            return that.CurrentItemId;
        }
        private void set_21_IdToColourConverter_CurrentItemId(object instance, object Value)
        {
            var that = (global::XBMCRemoteRT.Converters.IdToColourConverter)instance;
            that.CurrentItemId = (global::System.Int32)Value;
        }
        private object get_22_IdToThicknessConverter_CurrentItemId(object instance)
        {
            var that = (global::XBMCRemoteRT.Converters.IdToThicknessConverter)instance;
            return that.CurrentItemId;
        }
        private void set_22_IdToThicknessConverter_CurrentItemId(object instance, object Value)
        {
            var that = (global::XBMCRemoteRT.Converters.IdToThicknessConverter)instance;
            that.CurrentItemId = (global::System.Int32)Value;
        }
        private object get_23_NowPlaying_NavigationHelper(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.NowPlaying)instance;
            return that.NavigationHelper;
        }
        private object get_24_NowPlaying_DefaultViewModel(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.NowPlaying)instance;
            return that.DefaultViewModel;
        }
        private object get_25_AllMoviesPage_DefaultViewModel(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Video.AllMoviesPage)instance;
            return that.DefaultViewModel;
        }
        private object get_26_AllMoviesPage_NavigationHelper(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Video.AllMoviesPage)instance;
            return that.NavigationHelper;
        }
        private object get_27_AllTVShowsPage_DefaultViewModel(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Video.AllTVShowsPage)instance;
            return that.DefaultViewModel;
        }
        private object get_28_AllTVShowsPage_NavigationHelper(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Video.AllTVShowsPage)instance;
            return that.NavigationHelper;
        }
        private object get_29_MovieDetailsHub_DefaultViewModel(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Video.MovieDetailsHub)instance;
            return that.DefaultViewModel;
        }
        private object get_30_MovieDetailsHub_NavigationHelper(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Video.MovieDetailsHub)instance;
            return that.NavigationHelper;
        }
        private object get_31_ColumnGridView_ItemsSource(object instance)
        {
            var that = (global::XBMCRemoteRT.UserControls.ColumnGridView)instance;
            return that.ItemsSource;
        }
        private void set_31_ColumnGridView_ItemsSource(object instance, object Value)
        {
            var that = (global::XBMCRemoteRT.UserControls.ColumnGridView)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_32_ColumnGridView_Columns(object instance)
        {
            var that = (global::XBMCRemoteRT.UserControls.ColumnGridView)instance;
            return that.Columns;
        }
        private void set_32_ColumnGridView_Columns(object instance, object Value)
        {
            var that = (global::XBMCRemoteRT.UserControls.ColumnGridView)instance;
            that.Columns = (global::System.Int32)Value;
        }
        private object get_33_ColumnGridView_SelectionMode(object instance)
        {
            var that = (global::XBMCRemoteRT.UserControls.ColumnGridView)instance;
            return that.SelectionMode;
        }
        private void set_33_ColumnGridView_SelectionMode(object instance, object Value)
        {
            var that = (global::XBMCRemoteRT.UserControls.ColumnGridView)instance;
            that.SelectionMode = (global::Windows.UI.Xaml.Controls.ListViewSelectionMode)Value;
        }
        private object get_34_ColumnGridView_ItemTemplate(object instance)
        {
            var that = (global::XBMCRemoteRT.UserControls.ColumnGridView)instance;
            return that.ItemTemplate;
        }
        private void set_34_ColumnGridView_ItemTemplate(object instance, object Value)
        {
            var that = (global::XBMCRemoteRT.UserControls.ColumnGridView)instance;
            that.ItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_35_SearchMoviesPage_DefaultViewModel(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Video.SearchMoviesPage)instance;
            return that.DefaultViewModel;
        }
        private object get_36_SearchMoviesPage_NavigationHelper(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Video.SearchMoviesPage)instance;
            return that.NavigationHelper;
        }
        private object get_37_SearchTVShowsPage_DefaultViewModel(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Video.SearchTVShowsPage)instance;
            return that.DefaultViewModel;
        }
        private object get_38_SearchTVShowsPage_NavigationHelper(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Video.SearchTVShowsPage)instance;
            return that.NavigationHelper;
        }
        private object get_39_TVShowDetailsHub_DefaultViewModel(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Video.TVShowDetailsHub)instance;
            return that.DefaultViewModel;
        }
        private object get_40_TVShowDetailsHub_NavigationHelper(object instance)
        {
            var that = (global::XBMCRemoteRT.Pages.Video.TVShowDetailsHub)instance;
            return that.NavigationHelper;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember xamlMember = null;
            global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Coding4Fun.Toolkit.Controls.RoundButton.PressedBrush":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.RoundButton");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "PressedBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_RoundButton_PressedBrush;
                xamlMember.Setter = set_0_RoundButton_PressedBrush;
                break;
            case "Coding4Fun.Toolkit.Controls.RoundButton.Orientation":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.RoundButton");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "Orientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_RoundButton_Orientation;
                xamlMember.Setter = set_1_RoundButton_Orientation;
                break;
            case "Coding4Fun.Toolkit.Controls.RoundButton.ButtonWidth":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.RoundButton");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "ButtonWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_RoundButton_ButtonWidth;
                xamlMember.Setter = set_2_RoundButton_ButtonWidth;
                break;
            case "Coding4Fun.Toolkit.Controls.RoundButton.ButtonHeight":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.RoundButton");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "ButtonHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_RoundButton_ButtonHeight;
                xamlMember.Setter = set_3_RoundButton_ButtonHeight;
                break;
            case "Coding4Fun.Toolkit.Controls.ButtonBase.Label":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Coding4Fun.Toolkit.Controls.ButtonBase");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "Label", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_ButtonBase_Label;
                xamlMember.Setter = set_4_ButtonBase_Label;
                break;
            case "XBMCRemoteRT.CoverPage.DefaultViewModel":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.CoverPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "XBMCRemoteRT.Common.ObservableDictionary");
                xamlMember.Getter = get_5_CoverPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.CoverPage.NavigationHelper":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.CoverPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "XBMCRemoteRT.Common.NavigationHelper");
                xamlMember.Getter = get_6_CoverPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.MainPage.DefaultViewModel":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.MainPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "XBMCRemoteRT.Common.ObservableDictionary");
                xamlMember.Getter = get_7_MainPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.MainPage.NavigationHelper":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.MainPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "XBMCRemoteRT.Common.NavigationHelper");
                xamlMember.Getter = get_8_MainPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.AddConnectionPage.DefaultViewModel":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.AddConnectionPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "XBMCRemoteRT.Common.ObservableDictionary");
                xamlMember.Getter = get_9_AddConnectionPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.AddConnectionPage.NavigationHelper":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.AddConnectionPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "XBMCRemoteRT.Common.NavigationHelper");
                xamlMember.Getter = get_10_AddConnectionPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Audio.AlbumPage.DefaultViewModel":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Audio.AlbumPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "XBMCRemoteRT.Common.ObservableDictionary");
                xamlMember.Getter = get_11_AlbumPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Audio.AlbumPage.NavigationHelper":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Audio.AlbumPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "XBMCRemoteRT.Common.NavigationHelper");
                xamlMember.Getter = get_12_AlbumPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Audio.AllMusicPage.DefaultViewModel":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Audio.AllMusicPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "XBMCRemoteRT.Common.ObservableDictionary");
                xamlMember.Getter = get_13_AllMusicPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Audio.AllMusicPage.NavigationHelper":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Audio.AllMusicPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "XBMCRemoteRT.Common.NavigationHelper");
                xamlMember.Getter = get_14_AllMusicPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Audio.ArtistDetailsPage.DefaultViewModel":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Audio.ArtistDetailsPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "XBMCRemoteRT.Common.ObservableDictionary");
                xamlMember.Getter = get_15_ArtistDetailsPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Audio.ArtistDetailsPage.NavigationHelper":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Audio.ArtistDetailsPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "XBMCRemoteRT.Common.NavigationHelper");
                xamlMember.Getter = get_16_ArtistDetailsPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.EditConnectionPage.DefaultViewModel":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.EditConnectionPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "XBMCRemoteRT.Common.ObservableDictionary");
                xamlMember.Getter = get_17_EditConnectionPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.EditConnectionPage.NavigationHelper":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.EditConnectionPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "XBMCRemoteRT.Common.NavigationHelper");
                xamlMember.Getter = get_18_EditConnectionPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.InputPage.DefaultViewModel":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.InputPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "XBMCRemoteRT.Common.ObservableDictionary");
                xamlMember.Getter = get_19_InputPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.InputPage.NavigationHelper":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.InputPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "XBMCRemoteRT.Common.NavigationHelper");
                xamlMember.Getter = get_20_InputPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Converters.IdToColourConverter.CurrentItemId":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Converters.IdToColourConverter");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "CurrentItemId", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_IdToColourConverter_CurrentItemId;
                xamlMember.Setter = set_21_IdToColourConverter_CurrentItemId;
                break;
            case "XBMCRemoteRT.Converters.IdToThicknessConverter.CurrentItemId":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Converters.IdToThicknessConverter");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "CurrentItemId", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_IdToThicknessConverter_CurrentItemId;
                xamlMember.Setter = set_22_IdToThicknessConverter_CurrentItemId;
                break;
            case "XBMCRemoteRT.Pages.NowPlaying.NavigationHelper":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.NowPlaying");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "XBMCRemoteRT.Common.NavigationHelper");
                xamlMember.Getter = get_23_NowPlaying_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.NowPlaying.DefaultViewModel":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.NowPlaying");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "XBMCRemoteRT.Common.ObservableDictionary");
                xamlMember.Getter = get_24_NowPlaying_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Video.AllMoviesPage.DefaultViewModel":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Video.AllMoviesPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "XBMCRemoteRT.Common.ObservableDictionary");
                xamlMember.Getter = get_25_AllMoviesPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Video.AllMoviesPage.NavigationHelper":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Video.AllMoviesPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "XBMCRemoteRT.Common.NavigationHelper");
                xamlMember.Getter = get_26_AllMoviesPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Video.AllTVShowsPage.DefaultViewModel":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Video.AllTVShowsPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "XBMCRemoteRT.Common.ObservableDictionary");
                xamlMember.Getter = get_27_AllTVShowsPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Video.AllTVShowsPage.NavigationHelper":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Video.AllTVShowsPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "XBMCRemoteRT.Common.NavigationHelper");
                xamlMember.Getter = get_28_AllTVShowsPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Video.MovieDetailsHub.DefaultViewModel":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Video.MovieDetailsHub");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "XBMCRemoteRT.Common.ObservableDictionary");
                xamlMember.Getter = get_29_MovieDetailsHub_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Video.MovieDetailsHub.NavigationHelper":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Video.MovieDetailsHub");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "XBMCRemoteRT.Common.NavigationHelper");
                xamlMember.Getter = get_30_MovieDetailsHub_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.UserControls.ColumnGridView.ItemsSource":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.UserControls.ColumnGridView");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_ColumnGridView_ItemsSource;
                xamlMember.Setter = set_31_ColumnGridView_ItemsSource;
                break;
            case "XBMCRemoteRT.UserControls.ColumnGridView.Columns":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.UserControls.ColumnGridView");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "Columns", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_ColumnGridView_Columns;
                xamlMember.Setter = set_32_ColumnGridView_Columns;
                break;
            case "XBMCRemoteRT.UserControls.ColumnGridView.SelectionMode":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.UserControls.ColumnGridView");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "SelectionMode", "Windows.UI.Xaml.Controls.ListViewSelectionMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_ColumnGridView_SelectionMode;
                xamlMember.Setter = set_33_ColumnGridView_SelectionMode;
                break;
            case "XBMCRemoteRT.UserControls.ColumnGridView.ItemTemplate":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.UserControls.ColumnGridView");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_ColumnGridView_ItemTemplate;
                xamlMember.Setter = set_34_ColumnGridView_ItemTemplate;
                break;
            case "XBMCRemoteRT.Pages.Video.SearchMoviesPage.DefaultViewModel":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Video.SearchMoviesPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "XBMCRemoteRT.Common.ObservableDictionary");
                xamlMember.Getter = get_35_SearchMoviesPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Video.SearchMoviesPage.NavigationHelper":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Video.SearchMoviesPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "XBMCRemoteRT.Common.NavigationHelper");
                xamlMember.Getter = get_36_SearchMoviesPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Video.SearchTVShowsPage.DefaultViewModel":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Video.SearchTVShowsPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "XBMCRemoteRT.Common.ObservableDictionary");
                xamlMember.Getter = get_37_SearchTVShowsPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Video.SearchTVShowsPage.NavigationHelper":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Video.SearchTVShowsPage");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "XBMCRemoteRT.Common.NavigationHelper");
                xamlMember.Getter = get_38_SearchTVShowsPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Video.TVShowDetailsHub.DefaultViewModel":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Video.TVShowDetailsHub");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "XBMCRemoteRT.Common.ObservableDictionary");
                xamlMember.Getter = get_39_TVShowDetailsHub_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XBMCRemoteRT.Pages.Video.TVShowDetailsHub.NavigationHelper":
                userType = (global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XBMCRemoteRT.Pages.Video.TVShowDetailsHub");
                xamlMember = new global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "XBMCRemoteRT.Common.NavigationHelper");
                xamlMember.Getter = get_40_TVShowDetailsHub_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlSystemBaseType
    {
        global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::XBMCRemoteRT.XBMCRemoteRT_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


